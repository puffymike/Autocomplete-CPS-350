/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package assignment.pkg5;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.util.Arrays;
import java.util.Scanner;

/**
 *
 * @author Micah
 */
public class Autocomplete {

    public Term[] quries;

    /* Initializes the data structure from the given array of terms. */
    public Autocomplete(Term[] terms) {
        if (terms == null) {
            throw new java.lang.NullPointerException();
        }
        this.quries = terms;
        Arrays.sort(quries);
    }
    /* Returns all terms that start with the given prefix, in descending order 
     of weight. */

    public Term[] allMatches(String prefix) {
        if (prefix == null) {
            throw new java.lang.NullPointerException();
        }
        Term temp = new Term(prefix, 0);

        int i = BinarySearchDeluxe.firstIndexOf(quries, temp, Term.byPrefixOrder(prefix.length()));
        int j = BinarySearchDeluxe.lastIndexOf(quries, temp, Term.byPrefixOrder(prefix.length()));
        
        if (i == -1 || j == -1) {
            throw new java.lang.NullPointerException();
        }
        
        Term[] matches = new Term[j - i + 1];
        matches = Arrays.copyOfRange(quries, i, j);
        Arrays.sort(matches, Term.byReverseWeightOrder());
        return matches;
    }

    // Return the number of terms that start with the given prefix.
    public int numberOfMatches(String prefix) {
        if (prefix == null) {
            throw new java.lang.NullPointerException();
        }
        Term temp = new Term(prefix, 0);
        int i = BinarySearchDeluxe.firstIndexOf(quries, temp, Term.byPrefixOrder(prefix.length()));
        int j = BinarySearchDeluxe.lastIndexOf(quries, temp, Term.byPrefixOrder(prefix.length()));
        return j - i + 1;
    }
    public static void main(String[] args) throws FileNotFoundException, IOException {
        // read in the terms from a file     
        String filename = args[0];
        In in = new In(filename);
        int N = in.readInt(); // read the number on the first line      
        Term[] terms = new Term[N];
        
        for (int i = 0; i < N; i++) {
            long weight = in.readLong(); // read the next weight        
            in.readChar(); // scan past the tab         
            String query = in.readLine(); // read the next query         
            terms[i] = new Term(query, weight); // construct the term     
        }

        /* read in user queries from standard input and print out the top k matching terms */
        int k = Integer.parseInt(args[1]);
        Scanner stdIn = new Scanner(System.in);
        Autocomplete autocomplete = new Autocomplete(terms);
        while (stdIn.hasNextLine()) {
            String prefix = stdIn.readLine(); //read in user input (i.e., prefix)       
            Term[] results = autocomplete.allMatches(prefix);
            for (int i = 0; i < Math.min(k, results.length); i++) {
                System.out.println(results[i]);
            }
        }
    }

}
