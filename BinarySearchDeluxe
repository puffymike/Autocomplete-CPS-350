/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package assignment.pkg5;

import java.util.Comparator;

/**
 *
 * @author Micah
 */
public class BinarySearchDeluxe {
    /* Returns the index of the first key in a[] that equals the search key, or 
    -1 if no such key. */

    public static <Key> int firstIndexOf(Key[] a, Key key, Comparator<Key> comparator){
        if (a == null || key == null || comparator == null) {
    		throw new java.lang.NullPointerException();
    	}
    	if (a.length == 0) {
    		return -1;
    	}
    	int l = 0;
    	int r = a.length - 1;
    	//StdOut.println(r);
    	while (l + 1 < r) {
    		int mid = l + (r - l)/2;
    		if (comparator.compare(key, a[mid]) <= 0) {
    			r = mid;
    		} else {
    			l = mid;
    		}
    	}
    	if (comparator.compare(key, a[l]) == 0) {
    		return l;
    	}
    	if (comparator.compare(key, a[r]) == 0) {
    		return r;
    	}
    	return -1;
    }   
    
    /* Returns the index of the last key in a[] that equals the search key, or -1 
    if no such key. */
    public static <Key> int lastIndexOf(Key[] a, Key key, Comparator<Key> comparator){
        if (a == null || key == null || comparator == null) {
    		throw new java.lang.NullPointerException();
    	}
    	if (a == null || a.length == 0) {
    		return -1;
    	}
    	int l = 0;
    	int r = a.length - 1;
    	while (l + 1 < r) {
    		int mid = l + (r - l)/2;
    		if (comparator.compare(key, a[mid]) < 0) {
    			r = mid;
    		} else {
    			l = mid;
    		}
    	}
    	if (comparator.compare(key, a[r]) == 0) {
    		return r;
    	}
    	if (comparator.compare(key, a[l]) == 0) {
    		return l;
    	}
    	return -1;
    }
}
