package assignment.pkg5;

import java.util.Comparator;
import java.lang.*;
import java.util.*;

/**
 *
 * @author Micah
 */
public class Term implements Comparable<Term> {

    public String query;
    public double weight;

    /*Initializes a term with the given query string and weight*/
    public Term(String query, long weight) {
        //Throws exception if the query (word) is null
        if (query == null) {
            throw new java.lang.NullPointerException();
        }
        //Throws excpetion if the weight of the word is less than 0
        if (weight < 0) {
            throw new java.lang.IllegalArgumentException();
        }
        this.query = query; //Initialize query
        this.weight = weight; //Initialize weight
    }
    
    /*Compares the two terms in descending order by weight*/
    public static Comparator<Term> byReverseWeightOrder() {
        return new Comparator<Term>() {
            public int compare(Term x, Term y) {
                if (x.weight > y.weight) {
                    return -1;
                } else if (x.weight < y.weight) {
                    return 1;
                } else {
                    return 0;
                }
            }
        };

    }
    /*Compares the two terms in descending order but using only the first r characters
     of each query.*/

    public static Comparator<Term> byPrefixOrder(int textLength) {
        final int x = textLength;
        return new Comparator<Term>() {
            public int compare(Term term1, Term term2) {
                String string1 = term1.query;
                String string2 = term2.query;
                
                
                //Find the min length of either the text input or the term
                int minlength;

                if (string1.length() < string2.length()) {
                    minlength = string1.length();
                } else {
                    minlength = string2.length();
                }
                

                //Compare the substring of the larger string with the other string
                if (minlength >= textLength) {
                    return string1.substring(0, x).compareToIgnoreCase(string2.substring(0, x));
                } else if (string1.substring(0, minlength).compareToIgnoreCase(string2.substring(0, minlength)) == 0) {
                    if (string1.length() == minlength) {
                        return -1;
                    } else {
                        return 1;
                    }
                } else {
                    return string1.substring(0, minlength).compareToIgnoreCase(string2.substring(0, minlength));
                }
            }
        };
    }


    /*Compares the two terms in lexicographic order by query. */
    public int compareTo(Term that) {
        String x = this.query;
        String y = that.query;

        return x.compareToIgnoreCase(y); //Compares the two strings, ignoring the case

    }

    /*Returns a string representation of this term in the following format: the 
     weight, followed by a tab, followed by the query*/
    public String toString() {
        return Double.toString(this.weight) + "\t" + this.query;
    }
}
